{"version":3,"file":"index.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { createContext, useContext, useMemo, useState } from 'react'\n\ninterface ISelectorHook<TState> {\n  <TSelected>(\n    selector: (state: TState) => TSelected,\n    keys: keyof TState\n  ): TSelected\n}\n\ninterface IInitContext<TState> {\n  dispatch: (setter: (state: TState) => object) => void\n}\n\nconst createStore = <TInitialState,>({\n  initialState\n}: {\n  initialState: TInitialState\n}) => {\n  type GlobalContextType = typeof initialState\n\n  const StateContext = createContext({} as GlobalContextType)\n  const DispatchContext = createContext({} as IInitContext<GlobalContextType>)\n\n  const useDispatch = (\n    mutation: (state: GlobalContextType, payload?: any) => object\n  ) => {\n    const { dispatch } =\n      useContext<IInitContext<GlobalContextType>>(DispatchContext)\n\n    return (payload?: any) => {\n      dispatch((state: GlobalContextType) => mutation(state, payload))\n    }\n  }\n\n  const useSelector: ISelectorHook<GlobalContextType> = (selector, keys) => {\n    const state: GlobalContextType = useContext(StateContext)\n    const memo = useMemo(() => selector(state), [keys])\n    return memo\n  }\n\n  const Provider = ({\n    children,\n    initialValues\n  }: {\n    children: any\n    initialValues?: object\n  }) => {\n    const [state, setState] = useState<GlobalContextType>({\n      ...initialState,\n      ...initialValues\n    })\n\n    const valueDispatch = useMemo(\n      () => ({\n        dispatch: (setter: (state: GlobalContextType) => object) => {\n          setState((prevState) => ({\n            ...prevState,\n            ...setter(prevState)\n          }))\n        }\n      }),\n      [setState]\n    )\n\n    return (\n      <DispatchContext.Provider value={valueDispatch}>\n        <StateContext.Provider value={state}>{children}</StateContext.Provider>\n      </DispatchContext.Provider>\n    )\n  }\n\n  return {\n    Provider,\n    useDispatch,\n    useSelector\n  }\n}\n\nexport default createStore\n"],"names":["createStore","initialState","StateContext","createContext","DispatchContext","useDispatch","mutation","useContext","dispatch","payload","state","useSelector","selector","keys","memo","useMemo","Provider","children","initialValues","useState","setState","valueDispatch","setter","prevState","React","value"],"mappings":";;;;;;;;;;;;;;;;;;;;AAaA,IAAMA,WAAW,GAAG,SAAdA,WAAW;MACfC,YAAY,QAAZA,YAAY;EAMZ,IAAMC,YAAY,GAAGC,mBAAa,CAAC,EAAuB,CAAC;EAC3D,IAAMC,eAAe,GAAGD,mBAAa,CAAC,EAAqC,CAAC;EAE5E,IAAME,WAAW,GAAG,SAAdA,WAAW,CACfC,QAA6D;IAE7D,kBACEC,gBAAU,CAAkCH,eAAe,CAAC;MADtDI,QAAQ,eAARA,QAAQ;IAGhB,OAAO,UAACC,OAAa;MACnBD,QAAQ,CAAC,UAACE,KAAwB;QAAA,OAAKJ,QAAQ,CAACI,KAAK,EAAED,OAAO,CAAC;QAAC;KACjE;GACF;EAED,IAAME,WAAW,GAAqC,SAAhDA,WAAW,CAAsCC,QAAQ,EAAEC,IAAI;IACnE,IAAMH,KAAK,GAAsBH,gBAAU,CAACL,YAAY,CAAC;IACzD,IAAMY,IAAI,GAAGC,aAAO,CAAC;MAAA,OAAMH,QAAQ,CAACF,KAAK,CAAC;OAAE,CAACG,IAAI,CAAC,CAAC;IACnD,OAAOC,IAAI;GACZ;EAED,IAAME,QAAQ,GAAG,SAAXA,QAAQ;QACZC,QAAQ,SAARA,QAAQ;MACRC,aAAa,SAAbA,aAAa;IAKb,gBAA0BC,cAAQ,cAC7BlB,YAAY,EACZiB,aAAa,EAChB;MAHKR,KAAK;MAAEU,QAAQ;IAKtB,IAAMC,aAAa,GAAGN,aAAO,CAC3B;MAAA,OAAO;QACLP,QAAQ,EAAE,kBAACc,MAA4C;UACrDF,QAAQ,CAAC,UAACG,SAAS;YAAA,oBACdA,SAAS,EACTD,MAAM,CAACC,SAAS,CAAC;WACpB,CAAC;;OAEN;KAAC,EACF,CAACH,QAAQ,CAAC,CACX;IAED,OACEI,6BAACpB,eAAe,CAACY,QAAQ;MAACS,KAAK,EAAEJ;OAC/BG,6BAACtB,YAAY,CAACc,QAAQ;MAACS,KAAK,EAAEf;OAAQO,QAAQ,CAAyB,CAC9C;GAE9B;EAED,OAAO;IACLD,QAAQ,EAARA,QAAQ;IACRX,WAAW,EAAXA,WAAW;IACXM,WAAW,EAAXA;GACD;AACH,CAAC;;;;"}
{"version":3,"file":"index.modern.js","sources":["../src/index.tsx"],"sourcesContent":["import React, {createContext, useContext, useMemo, useState} from 'react';\n\ninterface ISelectorHook<TState> {\n  <TSelected>(selector: (state: TState) => TSelected): TSelected;\n}\n\ninterface IInitContext<TState> {\n  dispatch: (setter: (state: TState) => object) => void;\n}\n\nconst createStore = <TInitialState, >({\n                            initialState\n                          }: {\n  initialState: TInitialState\n}) => {\n\n  type GlobalContextType = typeof initialState;\n\n  const StateContext = createContext({} as GlobalContextType);\n  const DispatchContext = createContext({} as IInitContext<GlobalContextType>);\n\n  const useDispatch = (mutation: (state: GlobalContextType, payload?: any) => object) => {\n    const {dispatch} = useContext<IInitContext<GlobalContextType>>(DispatchContext)\n\n    return (payload?: any) => {\n      dispatch((state: GlobalContextType) => mutation(state, payload));\n    };\n  };\n\n  const useSelector: ISelectorHook<GlobalContextType> = (selector) => {\n    const state: GlobalContextType = useContext(StateContext)\n    return selector(state);\n  };\n\n\n  const Provider = ({children, initialValues}: { children: any, initialValues?: object }) => {\n    const [state, setState] = useState<GlobalContextType>({...initialState, ...initialValues});\n\n    const valueDispatch = useMemo(() => ({\n      dispatch: (setter: (state: GlobalContextType) => object) => {\n        setState((prevState) => ({\n          ...prevState,\n          ...setter(prevState),\n        }));\n      }\n    }), [setState])\n\n    return <DispatchContext.Provider value={valueDispatch}>\n      <StateContext.Provider\n        value={state}>\n        {children}\n      </StateContext.Provider>\n    </DispatchContext.Provider>;\n  }\n\n  return {\n    Provider,\n    useDispatch,\n    useSelector\n  }\n}\n\nexport default createStore;\n"],"names":["createStore","initialState","StateContext","createContext","DispatchContext","useDispatch","mutation","useContext","dispatch","payload","state","useSelector","selector","Provider","children","initialValues","useState","setState","valueDispatch","useMemo","setter","prevState","React","value"],"mappings":";;;;;;;;;;;;;;;;;AAUA,IAAMA,WAAW,GAAG,SAAdA,WAAW;MACWC,YAAY,QAAZA,YAAY;EAOtC,IAAMC,YAAY,GAAGC,aAAa,CAAC,EAAuB,CAAC;EAC3D,IAAMC,eAAe,GAAGD,aAAa,CAAC,EAAqC,CAAC;EAE5E,IAAME,WAAW,GAAG,SAAdA,WAAW,CAAIC,QAA6D;IAChF,kBAAmBC,UAAU,CAAkCH,eAAe,CAAC;MAAxEI,QAAQ,eAARA,QAAQ;IAEf,OAAO,UAACC,OAAa;MACnBD,QAAQ,CAAC,UAACE,KAAwB;QAAA,OAAKJ,QAAQ,CAACI,KAAK,EAAED,OAAO,CAAC;QAAC;KACjE;GACF;EAED,IAAME,WAAW,GAAqC,SAAhDA,WAAW,CAAsCC,QAAQ;IAC7D,IAAMF,KAAK,GAAsBH,UAAU,CAACL,YAAY,CAAC;IACzD,OAAOU,QAAQ,CAACF,KAAK,CAAC;GACvB;EAGD,IAAMG,QAAQ,GAAG,SAAXA,QAAQ;QAAKC,QAAQ,SAARA,QAAQ;MAAEC,aAAa,SAAbA,aAAa;IACxC,gBAA0BC,QAAQ,cAAwBf,YAAY,EAAKc,aAAa,EAAE;MAAnFL,KAAK;MAAEO,QAAQ;IAEtB,IAAMC,aAAa,GAAGC,OAAO,CAAC;MAAA,OAAO;QACnCX,QAAQ,EAAE,kBAACY,MAA4C;UACrDH,QAAQ,CAAC,UAACI,SAAS;YAAA,oBACdA,SAAS,EACTD,MAAM,CAACC,SAAS,CAAC;WACpB,CAAC;;OAEN;KAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;IAEf,OAAOK,oBAAClB,eAAe,CAACS,QAAQ;MAACU,KAAK,EAAEL;OACtCI,oBAACpB,YAAY,CAACW,QAAQ;MACpBU,KAAK,EAAEb;OACNI,QAAQ,CACa,CACC;GAC5B;EAED,OAAO;IACLD,QAAQ,EAARA,QAAQ;IACRR,WAAW,EAAXA,WAAW;IACXM,WAAW,EAAXA;GACD;AACH,CAAC;;;;"}